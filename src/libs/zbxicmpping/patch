--- icmpping.c.orig	2019-06-26 20:22:39.000000000 +0500
+++ icmpping.c.NEW	2019-07-09 23:31:39.000000000 +0500
@@ -24,10 +24,14 @@
 
 extern char	*CONFIG_SOURCE_IP;
 extern char	*CONFIG_FPING_LOCATION;
+extern char	*CONFIG_NMAP_LOCATION;
+extern char	*CONFIG_NMAP_PARAMS;
+
 #ifdef HAVE_IPV6
 extern char	*CONFIG_FPING6_LOCATION;
 #endif
 extern char	*CONFIG_TMPDIR;
+#define MAX_ICMP_NMAP_FIELDS		10

@@ -73,9 +77,12 @@
 	*checked = 1;
 }
 
+
 static int	process_ping(ZBX_FPING_HOST *hosts, int hosts_count, int count, int interval, int size, int timeout,
 		char *error, int max_error_len)
 {
+	const char	*__function_name = "process_ping";
+
 	FILE		*f;
 	char		*c, params[64];
 	char		filename[MAX_STRING_LEN], tmp[MAX_STRING_LEN];
@@ -95,8 +102,15 @@
 
 	assert(hosts);
 
-	zabbix_log(LOG_LEVEL_DEBUG, "In %s() hosts_count:%d", __func__, hosts_count);
-
+	zabbix_log(LOG_LEVEL_DEBUG, "In %s() hosts_count:%d", __function_name, hosts_count);
+	
+	if (NULL != CONFIG_NMAP_LOCATION && 
+		(-1 == access(CONFIG_NMAP_LOCATION, X_OK) ) ) {
+		//todo: add check of root owner and setuid bit
+		zbx_snprintf(error, max_error_len, "%s: %s", CONFIG_NMAP_LOCATION, zbx_strerror(errno));
+		return ret;
+	}
+	
 	if (-1 == access(CONFIG_FPING_LOCATION, X_OK))
 	{
 #if !defined(HAVE_IPV6)
@@ -240,134 +254,290 @@
 
 	fclose(f);
 
-	zabbix_log(LOG_LEVEL_DEBUG, "%s", tmp);
-
-	if (NULL == (f = popen(tmp, "r")))
-	{
-		zbx_snprintf(error, max_error_len, "%s: %s", tmp, zbx_strerror(errno));
-
-		unlink(filename);
+	//use 1 packet as an indication that we want to use nmap
+	//since it's turned out that doing one packet check via vping is also a good idea, 
+	// timeout =1 (not realistic value ) used to indicate we want nmap to be invoked
+	// this also allows to runtime modification of the utility
+	if ( 1 == count && NULL != CONFIG_NMAP_LOCATION) 
+	{
+		//for 1-packet probes use nmap as accesibility utility
+		//ipv6 ??? i guess it won't work, but who knows: todo: check and fix ipv6 as soon as we have it
+
+		if (-1 == size ) size=32;
+		
+		offset = zbx_snprintf(tmp, sizeof(tmp), "%s -4 --data-length=%d %s -iL %s 2>&1;",
+								CONFIG_NMAP_LOCATION,size,CONFIG_NMAP_PARAMS,filename);
+#ifdef HAVE_IPV6
+		offset = zbx_snprintf(tmp, sizeof(tmp), "%s -6 --data-length=%d %s -iL %s 2>&1",
+								CONFIG_NMAP_LOCATION,size,CONFIG_NMAP_PARAMS,filename);
+#endif
 
-		return ret;
-	}
+		zabbix_log(LOG_LEVEL_DEBUG, "Will run %s", tmp);
 
-	if (NULL == fgets(tmp, sizeof(tmp), f))
-	{
-		strscpy(tmp, "no output");
-	}
-	else
-	{
 		for (i = 0; i < hosts_count; i++)
 		{
-			hosts[i].status = (char *)zbx_malloc(NULL, count);
-			memset(hosts[i].status, 0, count);
+			hosts[i].rcv=0;
+			hosts[i].cnt=count;
 		}
 
+		if ( NULL == (f = popen(tmp, "r")))
+		{
+			zbx_snprintf(error, max_error_len, "%s: %s", tmp, zbx_strerror(errno));
+			unlink(filename);
+			return ret;
+		}
+
+		//	memset(tmp,0,sizeof(char)*
+		if ( NULL == fgets(tmp, sizeof(tmp), f)) {
+			zbx_snprintf(error, max_error_len, "Nmap failed: empty output");
+			return ret;
+		}
+		
 		do
 		{
+			char *fields[MAX_ICMP_NMAP_FIELDS];
+			char *end_field;
+			char *latency;
+
 			zbx_rtrim(tmp, "\n");
 			zabbix_log(LOG_LEVEL_DEBUG, "read line [%s]", tmp);
 
+			if (25 > strnlen(tmp,MAX_STRING_LEN) ) {
+				zabbix_log(LOG_LEVEL_DEBUG, "skipping too short line");
+				continue;
+			} 
+
+			//splitting line into fields
+			char *field_ptr = strtok_r(tmp, " ", &end_field);
+			int field_count=0;
+
+			for (i=0; i++; i<field_count) 
+				fields[i]=NULL; 
+
+			while ( field_ptr != NULL && MAX_ICMP_NMAP_FIELDS > field_count) 
+			{	
+				zabbix_log(LOG_LEVEL_DEBUG, "read field %d [%s]",field_count, field_ptr);
+			    fields[field_count++]=field_ptr;
+			    field_ptr = strtok_r(NULL, " ", &end_field);
+			}
+
+			if ( NULL == fields[4]) {
+				zabbix_log(LOG_LEVEL_DEBUG, "String 1 has not enough fields ");
+				continue;
+			}
+			
+			if (strcmp("Nmap",fields[0]) != 0 ||
+				strcmp("scan",fields[1]) !=0  ||
+				strcmp("report", fields[2]) !=0 )  
+			{  
+				zabbix_log(LOG_LEVEL_DEBUG, "String doesn't match 'Nmap scan for', skipping");
+				continue;
+			}
+
 			host = NULL;
 
-			if (NULL != (c = strchr(tmp, ' ')))
+			for (i = 0; i < hosts_count; i++)
 			{
-				*c = '\0';
-				for (i = 0; i < hosts_count; i++)
-					if (0 == strcmp(tmp, hosts[i].addr))
-					{
-						host = &hosts[i];
-						break;
-					}
-				*c = ' ';
+				if (0 == strcmp(fields[4], hosts[i].addr))
+				{
+					host = &hosts[i];
+					zabbix_log(LOG_LEVEL_DEBUG, "Host has been found %s", fields[4]);
+					break;
+				}
 			}
 
-			if (NULL == host)
+			if (NULL == host) {
+				zabbix_log(LOG_LEVEL_DEBUG, "Host hasn't been found in the request");
 				continue;
+			} else {
+				zabbix_log(LOG_LEVEL_DEBUG, "Host has been found %s", fields[4]);
+			}
 
-			if (NULL == (c = strstr(tmp, " : ")))
+			if (NULL == fgets(tmp, sizeof(tmp), f)) {
+				zabbix_log(LOG_LEVEL_DEBUG, "Couldn't read second line");
 				continue;
+			}
 
-			/* when NIC bonding is used, there are also lines like */
-			/* 192.168.1.2 : duplicate for [0], 96 bytes, 0.19 ms */
+			zabbix_log(LOG_LEVEL_DEBUG, "read line %s", tmp);
+			zbx_rtrim(tmp, "\n");
 
-			if (NULL != strstr(tmp, "duplicate for"))
-				continue;
+			field_ptr = strtok_r(tmp, " ", &end_field);
 
-			c += 3;
+			for (i = 0; i++; i<field_count)
+				fields[i]=NULL;
 
-			/* The were two issues with processing only the fping's final status line:  */
-			/*   1) pinging broadcast addresses could have resulted in responses from   */
-			/*      different hosts, which were counted as the target host responses;   */
-			/*   2) there is a bug in fping (v3.8 at least) where pinging broadcast     */
-			/*      address will result in no individual responses, but the final       */
-			/*      status line might contain a bogus value.                            */
-			/* Because of the above issues we must monitor the individual responses     */
-			/* and mark the valid ones.                                                 */
-			if ('[' == *c)
+			field_count=0;
+
+			while (field_ptr != NULL && MAX_ICMP_NMAP_FIELDS>field_count) 
+			{	
+				zabbix_log(LOG_LEVEL_DEBUG, "String 2 parced field %s",field_ptr);
+				fields[field_count++]=field_ptr;
+				field_ptr = strtok_r(NULL, " ", &end_field);
+			}
+
+			if (NULL == fields[3]) {
+				zabbix_log(LOG_LEVEL_DEBUG, "String too short");
+				continue;
+			}
+
+			if ( 0 != strncmp(fields[0], "Host", 2) ||
+				 0 != strncmp(fields[1], "is", 2)  ||
+				 0 != strncmp(fields[2], "up", 2) ) 
 			{
-				/* Fping appends response source address in format '[<- 10.3.0.10]' */
-				/* if it does not match the target address. Ignore such responses.  */
-				if (NULL != strstr(c + 1, "[<-"))
-					continue;
+				zabbix_log(LOG_LEVEL_DEBUG, "String 2 doesn't match 'Host is up', skipping");
+				continue;
+			}
 
-				/* get the index of individual ping response */
-				index = atoi(c + 1);
+			latency=fields[3]+1;
+			zbx_rtrim(latency,"s");
+			sec=atof(latency);
+
+			host->rcv=count;
+			host->min=sec;
+			host->max=sec;
+			host->sum=sec*count;
 
-				if (0 > index || index >= count)
-					continue;
+			zabbix_log(LOG_LEVEL_DEBUG, "Final parced info is host=%s , latency=%f",host->addr,sec);
 
-				host->status[index] = 1;
+			ret = SUCCEED;
+		}
+		while (NULL != fgets(tmp, sizeof(tmp), f));
 
-				continue;
+		if (NOTSUPPORTED == ret)
+			zbx_snprintf(error, max_error_len, "Nmap failed");
+
+	} else 
+	{
+		//doing things fping way
+		zabbix_log(LOG_LEVEL_DEBUG, "%s", tmp);
+
+		if (NULL == (f = popen(tmp, "r")))
+		{
+			zbx_snprintf(error, max_error_len, "%s: %s", tmp, zbx_strerror(errno));
+			unlink(filename);
+			return ret;
+		}
+
+		if (NULL == fgets(tmp, sizeof(tmp), f))
+		{
+			strscpy(tmp, "no output");
+		}
+		else
+		{
+			for (i = 0; i < hosts_count; i++)
+			{
+				hosts[i].status = (char *)zbx_malloc(NULL, count);
+				memset(hosts[i].status, 0, count);
 			}
 
-			/* process status line for a host */
-			index = 0;
 			do
 			{
-				if (1 == host->status[index])
+				zbx_rtrim(tmp, "\n");
+				zabbix_log(LOG_LEVEL_DEBUG, "read line [%s]", tmp);
+
+				host = NULL;
+
+				if (NULL != (c = strchr(tmp, ' ')))
+				{
+					*c = '\0';
+					for (i = 0; i < hosts_count; i++)
+						if (0 == strcmp(tmp, hosts[i].addr))
+						{
+							host = &hosts[i];
+							break;
+						}
+					*c = ' ';
+				}
+
+				if (NULL == host)
+					continue;
+
+				if (NULL == (c = strstr(tmp, " : ")))
+					continue;
+
+				/* when NIC bonding is used, there are also lines like */
+				/* 192.168.1.2 : duplicate for [0], 96 bytes, 0.19 ms */
+
+				if (NULL != strstr(tmp, "duplicate for"))
+					continue;
+
+				c += 3;
+
+				/* The were two issues with processing only the fping's final status line:  */
+				/*   1) pinging broadcast addresses could have resulted in responses from   */
+				/*      different hosts, which were counted as the target host responses;   */
+				/*   2) there is a bug in fping (v3.8 at least) where pinging broadcast     */
+				/*      address will result in no individual responses, but the final       */
+				/*      status line might contain a bogus value.                            */
+				/* Because of the above issues we must monitor the individual responses     */
+				/* and mark the valid ones.                                                 */
+				if ('[' == *c)
 				{
-					sec = atof(c) / 1000; /* convert ms to seconds */
+					/* Fping appends response source address in format '[<- 10.3.0.10]' */
+					/* if it does not match the target address. Ignore such responses.  */
+					if (NULL != strstr(c + 1, "[<-"))
+						continue;
+
+					/* get the index of individual ping response */
+					index = atoi(c + 1);
+
+					if (0 > index || index >= count)
+						continue;
 
-					if (0 == host->rcv || host->min > sec)
-						host->min = sec;
-					if (0 == host->rcv || host->max < sec)
-						host->max = sec;
-					host->sum += sec;
-					host->rcv++;
+					host->status[index] = 1;
+
+					continue;
 				}
-			}
-			while (++index < count && NULL != (c = strchr(c + 1, ' ')));
 
-			host->cnt += count;
+				/* process status line for a host */
+				index = 0;
+				do
+				{
+					if (1 == host->status[index])
+					{
+						sec = atof(c) / 1000; /* convert ms to seconds */
+
+						if (0 == host->rcv || host->min > sec)
+							host->min = sec;
+						if (0 == host->rcv || host->max < sec)
+							host->max = sec;
+						host->sum += sec;
+						host->rcv++;
+					}
+				}
+				while (++index < count && NULL != (c = strchr(c + 1, ' ')));
+
+				host->cnt += count;
 #ifdef HAVE_IPV6
-			if (host->cnt == count && NULL == CONFIG_SOURCE_IP &&
-					0 != (fping_existence & FPING_EXISTS) &&
-					0 != (fping_existence & FPING6_EXISTS))
-			{
-				memset(host->status, 0, count);	/* reset response statuses for IPv6 */
-			}
+				if (host->cnt == count && NULL == CONFIG_SOURCE_IP &&
+						0 != (fping_existence & FPING_EXISTS) &&
+						0 != (fping_existence & FPING6_EXISTS))
+				{
+					memset(host->status, 0, count);	/* reset response statuses for IPv6 */
+				}
 #endif
-			ret = SUCCEED;
+				ret = SUCCEED;
+			}
+			while (NULL != fgets(tmp, sizeof(tmp), f));
+
+			for (i = 0; i < hosts_count; i++)
+				zbx_free(hosts[i].status);
 		}
-		while (NULL != fgets(tmp, sizeof(tmp), f));
 
-		for (i = 0; i < hosts_count; i++)
-			zbx_free(hosts[i].status);
+		if (NOTSUPPORTED == ret)
+			zbx_snprintf(error, max_error_len, "fping failed: %s", tmp);
 	}
-	pclose(f);
 
+	pclose(f);
 	unlink(filename);
 
-	if (NOTSUPPORTED == ret)
-		zbx_snprintf(error, max_error_len, "fping failed: %s", tmp);
 
-	zabbix_log(LOG_LEVEL_DEBUG, "End of %s()", __func__);
+	zabbix_log(LOG_LEVEL_DEBUG, "End of %s()", __function_name);
 
 	return ret;
 }
 
+
 /******************************************************************************
  *                                                                            *
  * Function: do_ping                                                          *
@@ -386,14 +556,16 @@
  ******************************************************************************/
 int	do_ping(ZBX_FPING_HOST *hosts, int hosts_count, int count, int interval, int size, int timeout, char *error, int max_error_len)
 {
+	const char	*__function_name = "do_ping";
+
 	int	res;
 
-	zabbix_log(LOG_LEVEL_DEBUG, "In %s() hosts_count:%d", __func__, hosts_count);
+	zabbix_log(LOG_LEVEL_DEBUG, "In %s() hosts_count:%d", __function_name, hosts_count);
 
 	if (NOTSUPPORTED == (res = process_ping(hosts, hosts_count, count, interval, size, timeout, error, max_error_len)))
 		zabbix_log(LOG_LEVEL_ERR, "%s", error);
 
-	zabbix_log(LOG_LEVEL_DEBUG, "End of %s():%s", __func__, zbx_result_string(res));
+	zabbix_log(LOG_LEVEL_DEBUG, "End of %s():%s", __function_name, zbx_result_string(res));
 
 	return res;
 }
